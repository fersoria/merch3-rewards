import * as chains from "viem/chains"; // Importa todas las cadenas estándar de viem

// Define la cadena de Camp Network Testnet aquí para targetNetworks
// Datos de la testnet proporcionados anteriormente:
// Network Name: basecamp
// RPC Endpoint: https://rpc-campnetwork.xyz
// Chain ID: 123420001114
// Currency Symbol: CAMP
// Block Explorer URL: https://basecamp.cloud.blockscout.com/
const campNetworkTestnetTarget = {
  id: 123420001114, // Chain ID real de Camp Network Testnet
  name: "Camp Network Testnet", // Nombre descriptivo
  nativeCurrency: { name: "CAMP", symbol: "CAMP", decimals: 18 }, // Información de la moneda nativa
  rpcUrls: {
    default: { http: ["https://rpc-campnetwork.xyz"] }, // URL RPC real
    public: { http: ["https://rpc-campnetwork.xyz"] }, // A menudo es bueno añadir también public
  },
  blockExplorers: {
    default: { 
      url: "https://basecamp.cloud.blockscout.com/",
      name: "Basecamp Explorer"
    },
  },
  // Puedes añadir otras propiedades si son necesarias para scaffoldConfig
  // color: "#64a95b", // Si scaffoldConfig usa color
  // gasPrice: 1000000000, // Si scaffoldConfig usa gasPrice
} as const; // Usamos 'as const' para tipado inmutable

/**
 * Defines the default networks for the application.
 *
 * These are the networks that are targeted by the frontend.
 * It's the one where your contracts are deployed.
 *
 * @property targetNetworks The list of networks the frontend should target.
 */
const scaffoldConfig = {
  // La lista de redes objetivo para el front-end.
  // Para este MVP, nos enfocamos principalmente en Camp Network Testnet.
  // Puedes añadir chains.hardhat si también quieres soportar desarrollo local.
  targetNetworks: [campNetworkTestnetTarget], // Cambiamos para que solo sea Camp Network Testnet como objetivo principal

  // Alchemy API key is used for fetching inventory, NFT metadata, etc.
  // You can get yours by creating an app at https://www.alchemy.com
  // If you use a different API key provider, you will need to modify the relevant utilities accordingly.
  // We use "test" as the default API key so developers can start prototyping out of the box,
  // but we recommend getting your own API Keys for Production Apps.
  alchemyApiKey: process.env.ALCHEMY_API_KEY || "oKxsbyfjpWSmWjPVcn7qPwWWlCFy73ie",

  // WalletConnect Project ID is used to connect to mobile wallets
  // You can get yours at https://cloud.walletconnect.com
  walletConnectProjectId: process.env.NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID || "3a8170812b534d0ff9d794f19a901d64",

  //
  // Auto generated by `yarn deploy`.
  //
  // Default:
  // └── localhost: the local network defined in hardhat.config.ts
  //
  // Others:
  // ...
  deployedContracts: {} as const,

  // Only useful for the local network.
  // It specifies the gas price to use when sending transactions.
  onlyLocalBurnerWallet: true,

  //
  // Auto generated by `yarn deploy`.
  //
  // Default:
  // └── localhost: the local network defined in hardhat.config.ts
  //
  // Others:
  // ...
  externalContracts: {} as const,

  // The interval at which your frontend polls the blockchain to get updated data.
  // 0 means no polling.
  pollingInterval: 30000, // 30 seconds

  //
  // Auto generated by `yarn deploy`.
  //
  // Default:
  // └── localhost: the local network defined in hardhat.config.ts
  //
  // Others:
  // ...
  // This is used to verify contracts on Etherscan.
  // You can get yours at https://etherscan.io/myapikey
  // You can also use the block explorer API key for other supported networks.
  // See https://hardhat.org/plugins/nomiclabs-hardhat-etherscan.html
  //
  // Default:
  // └── localhost: the local network defined in hardhat.config.ts
  //
  // Others:
  // ...
  etherscanApiKey: process.env.ETHERSCAN_API_KEY || "DNXJA8RX2Q3VZ4URQIWP7Z68CJXQZSC6AW",
} as const;

export default scaffoldConfig;